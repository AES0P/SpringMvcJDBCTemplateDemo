<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 自动扫描的包 -->
    <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
    <context:component-scan base-package="com.hzero.demo.springmvc.domain"/>
    <context:component-scan base-package="com.hzero.demo.springmvc.dao"/>
    <context:component-scan base-package="com.hzero.demo.springmvc.service"/>

    <import resource="Spring-Datasource.xml"/>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
    <!--  拦截器设置-->
    <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
    <!--    CLASS里指定的拦截器路径对应的就是自己自定义的拦截器-->
    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <bean class="com.hzero.demo.springmvc.interceptor.AllInterceptor"/>
        <mvc:interceptor>
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <mvc:mapping path="/login/"/>
            <!--            <mvc:exclude-mapping path="/"/>&lt;!&ndash;不匹配的 &ndash;&gt;-->
            <bean class="com.hzero.demo.springmvc.interceptor.IndexInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

</beans>
